loadi(63,13);	//load library code
loadi(64,14);

loadi(65,7);	//load INIT program
loadi(66,8);

loadi(22,35);	//load INT10 module
loadi(23,36);

loadi(2,15);	//load exception handler
loadi(3,16);

loadi(4,17);	//load timer interrupt
loadi(5,18);

loadi(16,29);	//INT7 for print
loadi(17,30);

// Load the idle code from disk to memory.
loadi(69,11);
loadi(70,12);

PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0


//------------------------------------------First one is for idle----------------------------------------------------------

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;        
[PTBR+13] = "0000";
[PTBR+14] = -1;           
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;        
[PTBR+19] = "0000";

PTBR = PTBR+20;

//-------------------------------------------Second one is for init------------------------------------------------------

//library
// TWO PAGES ARE REQUIRED FOR LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//Heap
// TWO PAGES ARE REQUIRED FOR HEAPS
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";


//Code
// FOUR PAGES ARE THERE IN TOTAL FOR CODE, OUT FOR WHICH HERE ONLY TWO ARE IN USE
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//Stack
// TWO PAGES ARE REQUIRED FOR STACK
// TOTAL = 2+2+4+2 = 10 = PTLR'S LENGTH

[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

PTBR = PTBR - 20; // WE HAD TO ENTER THE VALUE OF PTBR IN PROCESS TABLE FOR BOTH IDLE AND INIT PROCESS, SO THE PTBR IS RESTORED.

//----------------------------------------------------------------------------------------------------

// PROCESS_TABLE FOR PID = 0  (IDLE PROCESS)

[PROCESS_TABLE + 1] = 0;                //  PID
[PROCESS_TABLE + 4] = CREATED;          //  STATE
[PROCESS_TABLE + 11] = 82;              //  USER AREA PAGE NUMBER
[PROCESS_TABLE + 12] = 0;	        //  KPTR FIELD
[PROCESS_TABLE + 13] = 8*512;           //  UPTR FIELD
[PROCESS_TABLE + 14] = PTBR;            //  PTBR
[PROCESS_TABLE + 15] = 10;              //  PTLR

//-----------------------------------------------------------------------------------------------------

// PROCESS TABLE FOR PID = 1 (INIT PROCESS) 

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = RUNNING;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR + 20;
[PROCESS_TABLE + 16 + 15] = 10;

//-----------------------------------------------------------------------------------------------------


[81*512] = [69*512 + 1];   // address 69*512 + 1 contains entry point for idle as per xexe format
[76*512] = [65*512 + 1];  //  entry point for init process will be 65*512 + 1
SP = 8*512;
[SYSTEM_STATUS_TABLE + 1] = 1;
PTBR = PTBR + 20;
PTLR = 10;

ireturn;
