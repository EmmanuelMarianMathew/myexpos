alias func_name R1;

//----------------------------------------OPEN FUNCTION-------------------------------------------------

//return filetable index or -1, -2

if(func_name == OPEN) then
	//find the index of inode entry of the file
	alias fileName R2;	
	
	alias i R3;
	i = 0;
	alias inode_idx R4;
	inode_idx = -1;

	while(i < MAX_FILE_NUM) do
		if([INODE_TABLE + 16*i + 1] == fileName) then
			inode_idx = i;
			break;
		endif;
		i = i+1;
	endwhile;

	// entry not found
	if(inode_idx == -1) then
		R0 = -1;
		return;
	endif;

	//ACQUIRE INODE FUNCTION CALL BY RESOURCE MANAGER

	multipush(R1, R2, R3);
	R1 = ACQUIRE_INODE;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = inode_idx;
	call MOD_0;
	multipop(R1, R2, R3);

	// if locking fails
	if(R0 == -1) then
		return;
	endif;

	alias inode_entry R5;
	inode_entry = INODE_TABLE + 16*inode_idx;

	if([inode_entry+0] == EXEC) then
		//release inode
		multipush(R1, R2, R3);
		R1 = RELEASE_INODE;
		R2 = [SYSTEM_STATUS_TABLE+1];
		R3 = inode_idx;
		call MOD_0;
		multipop(R1, R2, R3);
		R0 = -1;
		return;
	endif;

	// SEARCH FOR OPEN FILE TABLE ENTRY IN OPEN FILE TABLE

	i = 0;
	alias open_file_entry R6;
	open_file_entry = -1;

	while(i < 32) do
		// check inode index field
		if([OPEN_FILE_TABLE+4*i] == -1) then
			open_file_entry = i;
			break;
		endif;	
		i = i+1;	
	endwhile;

	// IF NO FREE OPEN FILE ENTRY ==>> MAX OPEN FILES REACHED SO NO NEW FILE TO OPEN

	if(open_file_entry == -1) then
		multipush(R1, R2, R3);
		R1 = RELEASE_INODE;
		R2 = [SYSTEM_STATUS_TABLE+1];
		R3 = inode_idx;
		call MOD_0;
		multipop(R1, R2, R3);
		R0 = -2;
		return;
	endif;

	if(fileName == "root") then
		[OPEN_FILE_TABLE + open_file_entry*4] = INODE_ROOT; 		
	else 

		//otherwise if opened for first time make it to 1
		if([FILE_STATUS_TABLE + inode_idx*4 + 1] == -1) then
			[FILE_STATUS_TABLE + inode_idx*4 + 1] = 1;
		else
			[FILE_STATUS_TABLE + inode_idx*4 + 1] = [FILE_STATUS_TABLE + inode_idx*4 + 1] + 1;
		endif;
		
		[OPEN_FILE_TABLE + open_file_entry*4] = inode_idx;
	endif;

		[OPEN_FILE_TABLE + open_file_entry*4 + 1] = 1;
		[OPEN_FILE_TABLE + open_file_entry*4 + 2] = 0;

	backup;	
	R1 = RELEASE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inode_idx;
	call MOD_0;
	restore;

	R0 = open_file_entry;
	return;	
endif;

//-----------------------------------------CLOSE---------------------------------------------------------

// return 0, -1
if(func_name == CLOSE) then
	alias open_file_entry R2;
	alias inode_idx R3;
	alias open_file R4;
	alias file_status R5;

	open_file = OPEN_FILE_TABLE + 4*open_file_entry;
	inode_idx = [open_file+0];
	file_status = FILE_STATUS_TABLE + 4*(inode_idx);

	[open_file+1] = [open_file+1] - 1;

	if([open_file+1] == 0) then
		[open_file + 0] = -1;		//inode_idx
		[open_file + 1] = -1;		//open instance count
		[open_file + 2] = -1;		//lseek
		[open_file + 3] = -1;		//unused

		if(inode_idx != INODE_ROOT) then
			[file_status+1] = [file_status+1] - 1;
		endif;

		if([file_status+1] == 0) then
			[file_status+1] = -1;
		endif;
	endif;
	return;
endif;  

//-----------------------------------END OF CLOSE--------------------------------------------------------


//------------------------------------BUFFERED READ------------------------------------------------------

if(func_name == BUFFERED_READ) then
	alias block_num R2;
	alias offset R3;
	alias physicalAddr R4;
	alias buffer_num R5;
	alias buffer_table R6;

	buffer_num = block_num%4;
	buffer_table = BUFFER_TABLE + 4*buffer_num;

	// ACQUIRE BUFFER

	backup;
	R1 = ACQUIRE_BUFFER;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = buffer_num;
	call MOD_0;
	restore;

	// IF THE BUFFER CONTAINS A DIFFERENT DISK BLOCK
	if([buffer_table+0] != block_num) then
		// IF THE DIRTY BIT IS SET
		if([buffer_table+1] == 1) then
			backup;
			R1 = DISK_STORE;
			R2 = [SYSTEM_STATUS_TABLE+1];
			R3 = buffer_num + 71;		// page number
			R4 = [buffer_table+0];          // block number
			call MOD_4;
			restore;

			[buffer_table+1] = 0;
		endif;

		// LOAD THE REQUIRED DISK BUFFER
		backup;
		R1 = DISK_LOAD;
		R2 = [SYSTEM_STATUS_TABLE+1];
		R3 = buffer_num+71;			// page number
		R4 = block_num;				// block number
		call MOD_4;
		restore;
		
		[buffer_table+0] = block_num;
	endif;		

	[physicalAddr] = [(71 + buffer_num)*512 + offset];

	// RELEASE BUFFER
	backup;
	R1 = RELEASE_BUFFER;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = buffer_num;
	call MOD_0;
	restore;

	return;
endif;
