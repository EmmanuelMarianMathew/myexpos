// SYSTEM CALL NUMBER FOR SEMLOCK = 19
// SYSTEM CALL NUMBER FOR SEMUNLOCK = 20

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] = SP;
alias userSP R1;
userSP = SP;

SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias syscallno R2;
syscallno = [[PTBR+2*((userSP-5)/512)]*512 + (userSP-5)%512];

alias semdesc R3;
semdesc = [[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];

//-----------------------------------------SEMLOCK-------------------------------------------------------

// return 0 if success or the sempahore is already locked by this process
// return -1 if semID is invalid

if(syscallno == 19) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 19;
	if(semdesc > 7 || semdesc < 0 || [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+(496+2*semdesc)] != 1) then
		[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;
		ireturn;
	endif;

	alias semid R4;
	semid = [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 + (496+ semdesc*2 + 1)];

	while([SEMAPHORE_TABLE+4*semid] != -1) do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5] = semid;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[SEMAPHORE_TABLE+semid*4] = [SYSTEM_STATUS_TABLE+1];
	
	[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;

//---------------------------------------SEMUNLOCK-------------------------------------------------------

//return 0 if success
//return -1 if invalid semID
//return -2 if semaphore was not locked by the calling process


if(syscallno == 20) then

	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 20;

	//check for invalid semaphore ID
	if(semdesc<0 || semdesc>7 || ([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 + 496 + semdesc*2] != 1)) then
		[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;	//return -1
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;		
	endif;

	//check if the semaphore is locked by the calling process
	alias semid R7;
	semid = [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 + 496 + semdesc*2 + 1];

	if([SEMAPHORE_TABLE + 4*semid] != -1) then
		if([SEMAPHORE_TABLE + 4*semid] != [SYSTEM_STATUS_TABLE+1]) then
			[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = -2;	//return -2
			[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
			SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
			ireturn;
		endif;	

		[SEMAPHORE_TABLE + 4*semid] = -1; //unlock the semaphore for other processes by setting lockingPID to -1

		alias i R8;
		i = 0;
		while(i<16) do   //set the processes to ready who were waiting for this semaphore
			if([PROCESS_TABLE+i*16+4] == WAIT_SEMAPHORE && [PROCESS_TABLE+i*16+5] == semid) then
				[PROCESS_TABLE+i*16+4] = READY;
			endif;
			i = i + 1; 
		endwhile;
	endif;
	
	[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;
