// 11 : getpid
// 12 : getppid
// 13 : wait
// 14 : signal

alias userSP R1;
userSP = SP;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias syscallno R2;
syscallno = [[PTBR+2*((userSP-5)/512)]*512 + ((userSP-5)%512)];

//------------------------------------------GETPID-------------------------------------------------------

if(syscallno == 11) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 11;
	[[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+1];
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

	ireturn;

endif;

//------------------------------------------GETPPID------------------------------------------------------

if(syscallno == 12) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 12;
        [[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+2];
        SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

        ireturn;

endif;

//--------------------------------------------WAIT------------------------------------------------------

//takes PID of a process (for which the given process will wait) as an argument
if(syscallno == 13) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 13;
	alias pid R3;
	pid = [[PTBR+2*((userSP-4)/512)]*512 + ((userSP-4)%512)];
	if(pid == [SYSTEM_STATUS_TABLE+1] || pid >= 16 || pid < 0 || [PROCESS_TABLE+pid*16+4] == TERMINATED) then
		[[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

		ireturn;
	endif;

	// a process can wait for only one process
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_PROCESS;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5] = pid;

	backup;
	call MOD_5;
	restore;

	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;
	[[PTBR+2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = 0;
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

	ireturn;
	
endif;

//----------------------------------------SIGNAL---------------------------------------------------------

//no arguments are passed. all the process tables are checked if some process is waiting for current process
if(syscallno == 14) then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 14;
	
	alias i R1;
	i = 0;
	while(i < 16) do 
		if([PROCESS_TABLE+i*16+4] == WAIT_PROCESS && [PROCESS_TABLE+i*16+5] == [SYSTEM_STATUS_TABLE+1]) then
		[PROCESS_TABLE+i*16+4] = READY;
		endif;
	i = i+1;
	endwhile;

	[[PTBR+2*(userSP-1)/512]*512 + ((userSP-1)%512)] = 0;	//save the return value in the stack
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;	//reset the mode flag
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 13];	//change to user stack
	ireturn;

endif;
