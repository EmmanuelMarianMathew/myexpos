//9th section in process entry table is MODE FLAG, it is set 5 for write system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;


//Store the value of user SP in a register as we need it for further computations.
alias userSP R0;
userSP = SP;


[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13] = SP;	// UPTR = SP
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 11] * 512 - 1; //change SP to top of kernel stack


alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];


if (fileDescriptor != -2)
then
         alias physicalAddrRetVal R5;
         physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
         [physicalAddrRetVal] = -1;
else
        alias word R5;
        word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];


        multipush(R0, R1, R2, R3, R4, R5, R6);	// STORE THE REGISTERS ALREADY USED IN THE STACK

	R1 = 3;					// FUNCTION NUMBER FOR TERMINAL WRITE
	R2 = [SYSTEM_STATUS_TABLE + 1];		// PID
	R3 = word;

	call MOD_4;				// DEVICE MANAGER MODULE WHICH CONTAINS TERMINAL WRITE

	multipop(R0, R1, R2, R3, R4, R5, R6);	// RESTORE REGISTER CONTENTS

        alias physicalAddrRetVal R6;
        physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
        [physicalAddrRetVal] = 0;
endif;

SP = userSP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	// SET THE MODE FLAG TO 0

ireturn;
